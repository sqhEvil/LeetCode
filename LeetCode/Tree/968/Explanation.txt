给定一个二叉树，我们在树的节点上安装摄像头。

节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。

计算监控树的所有节点所需的最小摄像头数量。

 

示例 1：



输入：[0,0,null,0,0]
输出：1
解释：如图所示，一台摄像头足以监控所有节点。
示例 2：



输入：[0,0,null,0,null,0,null,null,0]
输出：2
解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。

提示：

给定树的节点数的范围是 [1, 1000]。
每个节点的值都是 0。


解法一： 后序遍历，贪心算法。
从叶子节点开始，叶子节点的父节点装摄像头才能使所需摄像头最少。
每个节点可以有3个状态，0没有覆盖，1有摄像头，2无摄像头但是有覆盖。
空节点应该当作有覆盖但无摄像头。
如果2个子节点都无摄像头，但是有覆盖，那么当前节点应该当作没有覆盖（0），由父节点覆盖，才能使摄像头最少。
如果2个子节点任意有1个没有覆盖，则当前节点必须有1个摄像头（1），才能够覆盖。
如果两个子节点有一个节点有摄像头，那么当前节点状态为2（2），有覆盖但无摄像头。
如果根节点没有覆盖，那么根节点必须放一个摄像头。




解法二：递归，分别计算左子树，右子树（动态规划）
当前节点有2种状态：有摄像头，没摄像头。
根据这2种状态，可以推算出3种情况：
a.在当前节点有摄像头的情况下，左子树和右子树分别满足条件的最小值。
b.整个树满足条件的最小值。
c.不管根节点是否被监控，左子树和右子树单独被监控的最小值。
左右子树的3种情况分别用La，Lb，Lc 和Ra，Rb，Rc。
那么有如下结论。
a=Lc+Rc+1(单独左右子树满足条件，然后再当前节点强制放1个摄像头)
b=min(a,min(La+Rc,Rc+La))  (要满足条件：根节点需要满足：当前节点有摄像头或者左右子树其中之一有摄像头。
a:当前节点有摄像头；
La+Rc:左节点有摄像头，右节点及其子树递归获取最小值即可；
Lc+Ra:右节点有摄像头，左节点及其子树递归获取最优解。)


动态规划思路：
将当前节点最优解，转换成对左右子节点的操作，完成状态的转移。
要想当前节点满足条件则有以下情况：
1.当前节点有摄像头，左右子树在不看当前子节点是否被覆盖情况下的分别最优（因为当前左右子节点已经被父节点覆盖，所以在计算当前子树的时候，无需考虑当前节点是否被覆盖）；
2.当前节点没有摄像头，左子节点有摄像头（并且左子树在有摄像头的前提下最优），右子树最优；
3.当前节点没有摄像头，右子节点右摄像头（并且右子树在有摄像头的前提下最优），左子树最优；
然后再从以下情况种选取最优情况即可。

分解上面的3中情况，可以得到3种状态
a.当前节点树满足条件的最优解的状态（状态原因：最终需要的求解，以及上述情况需要判断的左右子树最优都有用到这种状态）
b.当前节点有摄像头之后，其子树满足最优解的状态（状态原因：在上面的情况2，3中，需要计算子节点有摄像头的情况下，节点树的最优解；）
状态b,由于节点有摄像头，故只需将左右子树不考虑子节点是否覆盖的前提下的最优解，即左右子树状态c下的最优解
c.不论当前节点是否被摄像头覆盖到，其所有子节点都被监控到的最优解的状态（状态原因：情况1中，计算子树时，无需考虑子节点是否被覆盖）
状态c,有如下2中情况：
1.当前节点被覆盖的情况下的最优解，那么结果就是b
2.当前节点没有覆盖，那么结果就是两个子树的最优解之和：la+ra

当前节点三种状态值a、b、c，左右子节点对应三种状态值：la、lb、lc、ra、rb、rc
状态a的最优解，根据上面的情况分析，可以写出如下转移方程：
r1=1+lc+rc
r2=lb+ra
r3=la+rb
a=min(r1,r2,r3)

状态2的最优解，左右节点分别最优，然后加上1（当前节点的摄像头）
b=lc+rc+1

状态3的最优解，
c=min(b,la+ra)

边界条件：
当节点为空时，
状态a最优解状态为0，即a=0
状态b需要在当前节点放置摄像头，其实这种情况不存在，所以可以让当前节点设置一个极大值，但是考虑到状态a有左右子树的节点和，故将这个极大值除以2，即b=int.maxvalue/2
状态c不考虑当前节点是否被覆盖，所以最优解数量为0即可。即c=0
