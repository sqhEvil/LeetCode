给定一个二叉树，我们在树的节点上安装摄像头。

节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。

计算监控树的所有节点所需的最小摄像头数量。

 

示例 1：



输入：[0,0,null,0,0]
输出：1
解释：如图所示，一台摄像头足以监控所有节点。
示例 2：



输入：[0,0,null,0,null,0,null,null,0]
输出：2
解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。

提示：

给定树的节点数的范围是 [1, 1000]。
每个节点的值都是 0。


解法一： 后序遍历，贪心算法。
从叶子节点开始，叶子节点的父节点装摄像头才能使所需摄像头最少。
每个节点可以有3个状态，0没有覆盖，1有摄像头，2无摄像头但是有覆盖。
空节点应该当作有覆盖但无摄像头。
如果2个子节点都无摄像头，但是有覆盖，那么当前节点应该当作没有覆盖（0），由父节点覆盖，才能使摄像头最少。
如果2个子节点任意有1个没有覆盖，则当前节点必须有1个摄像头（1），才能够覆盖。
如果两个子节点有一个节点有摄像头，那么当前节点状态为2（2），有覆盖但无摄像头。
如果根节点没有覆盖，那么根节点必须放一个摄像头。




解法二：递归，分别计算左子树，右子树（动态规划）
当前节点有2种状态：有摄像头，没摄像头。
根据这2种状态，可以推算出3种情况：
a.在当前节点有摄像头的情况下，左子树和右子树分别满足条件的最小值。
b.整个树满足条件的最小值。
c.不管根节点是否被监控，左子树和右子树单独被监控的最小值。
左右子树的3种情况分别用La，Lb，Lc 和Ra，Rb，Rc。
那么有如下结论。
a=Lc+Rc+1(单独左右子树满足条件，然后再当前节点强制放1个摄像头)
b=min(a,min(La+Rc,Rc+La))  (要满足条件：根节点需要满足：当前节点有摄像头或者左右子树其中之一有摄像头。
a:当前节点有摄像头；
La+Rc:左节点有摄像头，右节点及其子树递归获取最小值即可；
Lc+Ra:右节点有摄像头，左节点及其子树递归获取最优解。)